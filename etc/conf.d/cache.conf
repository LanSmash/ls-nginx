#This is the default HTTP server listening on port 80 and 3128 (for natted connections from iptables)
# / requests are via forward proxy
# /depot/*/chunks are for steam via cache store proxy to save the files irrespective of server and expiry date

# This is proxy only, not steam cache directory
proxy_cache_path /data/cache levels=2:2 use_temp_path=off keys_zone=generic:1000m inactive=900d max_size=200g loader_files=10000 loader_sleep=50ms loader_threshold=300ms;

#slice_range only shows up when pulling from the cache.
log_format cache_log '$remote_addr $status $upstream_cache_status $body_bytes_sent "$host$request_uri" request_range"$http_range" sliced_range:"$slice_range";';
log_format steam_log_miss '$remote_addr MISS $status cache-key:"$uri" "$host$request_uri";';
log_format steam_log_hit '$remote_addr HIT $status cache-key:"$uri" "$host";';

server {
  #listen 80;
  listen 3128;
  #server_name _;

  resolver 8.8.8.8 ipv6=off;
  #resolver 172.17.0.1 ipv6=off; #this is another container's dns server

  client_body_buffer_size     10M;
  client_max_body_size        10M;

  root /data/steam;
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
        root   /usr/share/nginx/html;
  }

  location ~ ^/pub/ubuntu/dists/yakkety/ {
        try_files $uri @mirror;
        access_log /data/steam.log steam_log_hit  buffer=1M flush=2s;
        access_log /var/log/nginx/access.log steam_log_hit;
  }


  #steam cache
  location ~ ^/depot/[0-9]*/chunk/ {
	try_files $uri @mirror;
	access_log /data/steam.log steam_log_hit  buffer=1M flush=2s;
	access_log /var/log/nginx/access.log steam_log_hit;
  }

  proxy_temp_path /data/tmp 1 2;

  location @mirror {
	internal;

	proxy_pass http://$host$request_uri;
	proxy_store on; #location is under root path
	proxy_store_access user:rw group:rw all:r;
	proxy_next_upstream error timeout http_404;
	#proxy_temp_path /data/tmp 1 2;

	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

	add_header X-Mirror-Upstream-Status $upstream_status;
	add_header X-Mirror-Upstream-Response-Time $upstream_response_time;
	add_header X-Mirror-Status $upstream_cache_status;

        access_log /data/steam.log steam_log_miss  buffer=1M flush=2s;
	access_log /var/log/nginx/access.log steam_log_miss;
  }


  #generic cache suitable for general internet, different CDN/mirror servers will cache twice.
  location / {
	access_log  /data/cache.log cache_log buffer=1M flush=2s;
  	access_log  /var/log/nginx/access.log  cache_log;

	slice 1m;
	proxy_cache generic;
        proxy_cache_key    $host$request_uri$slice_range;
	proxy_set_header  Range $slice_range;
        proxy_http_version 1.1;
	proxy_set_header Connection "";

	#rate limit for each download
	#proxy_buffering on;
	#proxy_limit_rate 80000;
	#proxy_buffer_size 4k;
	#proxy_buffers 8 4k;
	
	# Only download one copy at a time and use a large timeout so
        # this really happens, otherwise we end up wasting bandwith
        # getting the file multiple times.
        proxy_cache_lock on;

        # When the timeout expires, NGINX forwards each queued request to the origin server unmodified
        # and does not cache the response returned by the origin server.
        proxy_cache_lock_timeout 15m;

        # Sets a deadline for the cache-fill operation. If the operation doesnâ€™t complete
        # within the specified time, NGINX forwards one more request to the origin server.
        proxy_cache_lock_age 200s;

        # Allow the use of state entries
        #proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;

        # Allow caching of 200 & 206 but not 301 or 302 as our cache key may not include query params
        # hence may not be valid for all users
        proxy_cache_valid 200 206 90d;
        proxy_cache_valid 301 302 0;

        # Enable cache revalidation (allows reuse of stale caches using if-modified-since etc.
        proxy_cache_revalidate on;

        # Don't cache requests marked as nocache=1
        # ignore for windows updates
	set $mycachebypass $arg_nocache$http_pragma;
	if ($http_user_agent ~* Microsoft-Delivery-Optimization) {
		set $mycachebypass 0;
		#return 403; #optionally deny all together
	}
	proxy_cache_bypass $mycachebypass;
	proxy_no_cache $mycachebypass;

        # Upstream Configuration
        #proxy_next_upstream error timeout http_404;
	proxy_next_upstream off;
        proxy_pass http://$host$request_uri;
        proxy_redirect off;
        # Some cdn (xbox) likes to send us to servers that timeout, decrease the wait before we move on
        proxy_connect_timeout 3s;

        # Upstream request headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Debug Headers
        #add_header X-Upstream-Status $upstream_status;
        #add_header X-Upstream-Response-Time $upstream_response_time;
        add_header X-LSCache-Status $upstream_cache_status;
	add_header Via "proxy.ls.lansmash.com" always;
  }
}

