proxy_cache_path /data/cache levels=2:2 keys_zone=generic:500m inactive=200d max_size=500000m loader_files=1000 loader_sleep=50ms loader_threshold=300ms;

proxy_cache_path /data/steam levels=2:2 keys_zone=steam:500m inactive=200d max_size=50m loader_files=1000 loader_sleep=50ms loader_threshold=300ms;

#slice_range only shows up when pulling from the cache.
log_format cache_log '$remote_addr $status $upstream_cache_status $body_bytes_sent "$host$request_uri" request_range"$http_range" sliced_range:"$slice_range";';
access_log  /data/cache.log cache_log;

log_format steam_log '$remote_addr "$upstream_cache_status" cache-key:"$uri" $status "$host$request_uri";';

server {
  listen 3128;

  #ensure we are not using the redirected dns
  resolver 8.8.8.8 8.8.4.4;

  client_body_buffer_size     10M;
  client_max_body_size        10M;

  #steam cache
  location ~ ^/depot/[0-9]*/chunk/ {
	proxy_cache steam;  #from proxy_cache_path keys_zone= 

	proxy_cache_key $uri;
	access_log /data/steam.log steam_log;
	proxy_http_version 1.1;
	proxy_cache_lock on;
	proxy_cache_lock_timeout 1m;
	proxy_cache_lock_age 30s;
        proxy_cache_valid 200 206 90d;
        proxy_cache_valid 301 302 0;
        proxy_cache_revalidate off;

        proxy_next_upstream error timeout http_404;
        proxy_pass http://$host$request_uri;
        proxy_redirect off;
        proxy_connect_timeout 3s;
}


  #generic cache suitable for general internet, different CDN/mirror servers will cache twice.
  location / {
	slice 1m;
	proxy_cache generic; #proxy_cache_path keys_zone=
	#proxy_cache_key   $uri$slice_range;
        proxy_cache_key    $host$request_uri$slice_range;
	#proxy_cache_key   $uri$is_args$args$slice_range;
	proxy_set_header  Range $slice_range;
        proxy_http_version 1.1;

	# Only download one copy at a time and use a large timeout so
        # this really happens, otherwise we end up wasting bandwith
        # getting the file multiple times.
        proxy_cache_lock on;

        # When the timeout expires, NGINX forwards each queued request to the origin server unmodified
        # and does not cache the response returned by the origin server.
        proxy_cache_lock_timeout 15m;

        # Sets a deadline for the cache-fill operation. If the operation doesnâ€™t complete
        # within the specified time, NGINX forwards one more request to the origin server.
        proxy_cache_lock_age 200s;

        # Allow the use of state entries
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;


        # Allow caching of 200 & 206 but not 301 or 302 as our cache key may not include query params
        # hence may not be valid for all users
        proxy_cache_valid 200 206 90d;
        proxy_cache_valid 301 302 0;

        # Enable cache revalidation
        proxy_cache_revalidate on;

        # Don't cache requests marked as nocache=1
        proxy_cache_bypass $arg_nocache;



        # Upstream Configuration
        proxy_next_upstream error timeout http_404;
        proxy_pass http://$host$request_uri;
        proxy_redirect off;
        proxy_ignore_client_abort on;
        # Some cdn (xbox) likes to send us to servers that timeout, decrease the wait before we move on
        proxy_connect_timeout 3s;


        # Upstream request headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Debug Headers
        add_header X-Upstream-Status $upstream_status;
        add_header X-Upstream-Response-Time $upstream_response_time;
        add_header X-Upstream-Cache-Status $upstream_cache_status;
  }
}

